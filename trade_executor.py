# === trade_executor.py ===
# –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

import time
import psycopg2
import os
from datetime import datetime, timedelta

PG_HOST = os.environ.get("PG_HOST")
PG_PORT = os.environ.get("PG_PORT", 5432)
PG_NAME = os.environ.get("PG_NAME")
PG_USER = os.environ.get("PG_USER")
PG_PASSWORD = os.environ.get("PG_PASSWORD")

# === –°–¢–†–ê–¢–ï–ì–ò–Ø: channel_vilarso ===
def run_channel_vilarso(symbol, action, signal_time):
    print(f"üß† –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso –¥–ª—è {symbol} @ {signal_time}", flush=True)

    if check_open_trade_exists(symbol):
        print(f"‚õî –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ {symbol}", flush=True)
        return

    interval_start = signal_time.replace(minute=(signal_time.minute // 5) * 5, second=0, microsecond=0)
    interval_end = interval_start + timedelta(minutes=5)

    required_control = "BUYZONE" if action.startswith("BUY") else "SELLZONE"
    if not check_control_signal(symbol, required_control, interval_start, interval_end, signal_time):
        print(f"‚õî –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ {required_control} –î–û {action}", flush=True)
        return

    if not check_trade_permission(symbol):
        print(f"‚õî –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É {symbol} –∑–∞–ø—Ä–µ—â–µ–Ω–∞", flush=True)
        return

    if not check_strategy_permission("channel_vilarso"):
        print(f"‚õî –°—Ç—Ä–∞—Ç–µ–≥–∏—è channel_vilarso –æ—Ç–∫–ª—é—á–µ–Ω–∞", flush=True)
        return

    if not check_volume_limit("channel_vilarso"):
        print(f"‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—ä—ë–º–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", flush=True)
        return

    direction = get_channel_direction(symbol)
    if not check_direction_allowed(direction, action):
        print(f"‚õî –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {direction} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", flush=True)
        return

    if not check_channel_width_vs_atr(symbol):
        print(f"‚õî –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ª–æ–≤–∏–µ >= 3*ATR", flush=True)
        return

    execute_trade(symbol, action, "channel_vilarso")
    print(f"‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol}", flush=True)

# === –ó–∞–≥–ª—É—à–∫–∏ –≤—Å–µ—Ö –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ===
def check_open_trade_exists(symbol): return False
def check_control_signal(symbol, control, start, end, action_time): return True
def check_trade_permission(symbol): return True
def check_strategy_permission(strategy): return True
def check_volume_limit(strategy): return True
def get_channel_direction(symbol): return "–≤–æ—Å—Ö–æ–¥—è—â–∏–π ‚ÜóÔ∏è"
def check_direction_allowed(direction, action): return True
def check_channel_width_vs_atr(symbol): return True
def execute_trade(symbol, action, strategy): pass

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ ===
def run_executor():
    print("üöÄ Trade Executor –∑–∞–ø—É—â–µ–Ω", flush=True)
    while True:
        try:
            conn = psycopg2.connect(
                dbname=PG_NAME,
                user=PG_USER,
                password=PG_PASSWORD,
                host=PG_HOST,
                port=PG_PORT
            )
            cur = conn.cursor()

            cur.execute("""
                SELECT timestamp, symbol, action
                FROM signals
                WHERE type = 'action'
                  AND processed = false
                  AND timestamp >= now() - interval '1 minute'
                ORDER BY timestamp DESC
            """)
            signals = cur.fetchall()

            for ts, symbol, action in signals:
                print(f"[{ts}] üõ∞Ô∏è {action} {symbol}", flush=True)
                run_channel_vilarso(symbol, action, ts)

                # ‚úÖ –ü–æ–º–µ—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                cur.execute("""
                    UPDATE signals
                    SET processed = true
                    WHERE symbol = %s AND action = %s AND timestamp = %s
                """, (symbol, action, ts))

            conn.commit()
            conn.close()

            if not signals:
                print("‚è± –ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (type='action')", flush=True)

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ trade_executor:", e, flush=True)

        time.sleep(10)

if __name__ == "__main__":
    run_executor()