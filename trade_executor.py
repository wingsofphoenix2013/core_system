# === trade_executor.py ===
# –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

import time
import psycopg2
import os
from datetime import datetime, timedelta

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
PG_HOST = os.environ.get("PG_HOST")
PG_PORT = os.environ.get("PG_PORT", 5432)
PG_NAME = os.environ.get("PG_NAME")
PG_USER = os.environ.get("PG_USER")
PG_PASSWORD = os.environ.get("PG_PASSWORD")

# === –°–¢–†–ê–¢–ï–ì–ò–Ø: channel_vilarso ===
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ action –ø–æ —É—Å–ª–æ–≤–∏—è–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

def run_channel_vilarso(symbol, action, signal_time):
    print(f"üß† –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso –¥–ª—è {symbol} @ {signal_time}", flush=True)

    # üîé –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ä—É —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞
    if check_open_trade_exists(symbol):
        print(f"‚õî –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ {symbol}, —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω", flush=True)
        return

    # üîé –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
    interval_start = signal_time.replace(minute=(signal_time.minute // 5) * 5, second=0, microsecond=0)
    interval_end = interval_start + timedelta(minutes=5)

    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞ control –î–û action –≤ —Ç–æ–π –∂–µ —Å–≤–µ—á–µ
    if action.startswith("BUY"):
        required_control = "BUYZONE"
    else:
        required_control = "SELLZONE"

    if not check_control_signal(symbol, required_control, interval_start, interval_end, signal_time):
        print(f"‚õî –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ {required_control} –î–û {action} –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —Å–≤–µ—á–∏ ‚Äî –≤—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω", flush=True)
        return

    # üìõ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    if not check_trade_permission(symbol):
        print(f"‚õî –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É {symbol} –∑–∞–ø—Ä–µ—â–µ–Ω–∞", flush=True)
        return

    if not check_strategy_permission("channel_vilarso"):
        print(f"‚õî –°—Ç—Ä–∞—Ç–µ–≥–∏—è channel_vilarso –æ—Ç–∫–ª—é—á–µ–Ω–∞", flush=True)
        return

    # üìâ –ü—Ä–æ–≤–µ—Ä–∫–∞ maxtradevolume
    if not check_volume_limit("channel_vilarso"):
        print(f"‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—ä—ë–º–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso", flush=True)
        return

    # üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    direction = get_channel_direction(symbol)
    if not check_direction_allowed(direction, action):
        print(f"‚õî –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ({direction})", flush=True)
        return

    # üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞ vs ATR
    if not check_channel_width_vs_atr(symbol):
        print(f"‚õî –ö–∞–Ω–∞–ª —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏–π ‚Äî –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 3*ATR", flush=True)
        return

    # ‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
    execute_trade(symbol, action, "channel_vilarso")
    print(f"‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è {symbol}", flush=True)


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
def run_executor():
    print("üöÄ Trade Executor –∑–∞–ø—É—â–µ–Ω", flush=True)
    while True:
        try:
            conn = psycopg2.connect(
                dbname=PG_NAME,
                user=PG_USER,
                password=PG_PASSWORD,
                host=PG_HOST,
                port=PG_PORT
            )
            cur = conn.cursor()

            # üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–∏–ø–∞ action
            cur.execute("""
                SELECT timestamp, symbol, action
                FROM signals
                WHERE type = 'action'
                  AND timestamp >= now() - interval '1 minute'
                ORDER BY timestamp DESC
            """)
            signals = cur.fetchall()
            conn.close()

            if not signals:
                print("‚è± –ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (type='action')", flush=True)

            for ts, symbol, action in signals:
                print(f"[{ts}] üõ∞Ô∏è {action} {symbol}", flush=True)

                # –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso
                run_channel_vilarso(symbol, action, ts)

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ trade_executor:", e, flush=True)

        time.sleep(10)

if __name__ == "__main__":
    run_executor()