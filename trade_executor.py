# === trade_executor.py ===
# –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

import time
import psycopg2
import os
from datetime import datetime, timedelta

PG_HOST = os.environ.get("PG_HOST")
PG_PORT = os.environ.get("PG_PORT", 5432)
PG_NAME = os.environ.get("PG_NAME")
PG_USER = os.environ.get("PG_USER")
PG_PASSWORD = os.environ.get("PG_PASSWORD")

# === –°–¢–†–ê–¢–ï–ì–ò–Ø: channel_vilarso ===
def run_channel_vilarso(symbol, action, signal_time):
    print(f"üß† –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso –¥–ª—è {symbol} @ {signal_time}", flush=True)
    global entrylog
    entrylog = []

    if check_open_trade_exists(symbol):
        return

    interval_start = signal_time.replace(minute=(signal_time.minute // 5) * 5, second=0, microsecond=0)
    interval_end = interval_start + timedelta(minutes=5)

    required_control = "BUYZONE" if action.startswith("BUY") else "SELLZONE"
    if not check_control_signal(symbol, required_control, interval_start, interval_end, signal_time):
        return

    if not check_trade_permission(symbol):
        return

    if not check_strategy_permission("channel_vilarso"):
        return

    if not check_volume_limit("channel_vilarso"):
        return

    direction = get_channel_direction(symbol)
    if not check_direction_allowed(direction, action):
        return

    if not check_channel_width_vs_atr(symbol):
        return

    execute_trade(symbol, action, "channel_vilarso")
    print(f"‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol}", flush=True)
# === –ü–û–¢–û–ö @trade –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-—Ü–µ–Ω Binance ===
import threading
import websocket
import json

latest_price = {}

def load_symbols_from_db():
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("SELECT name FROM symbols")
        rows = cur.fetchall()
        conn.close()
        return [row[0].lower() for row in rows]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏–º–≤–æ–ª–æ–≤: {e}", flush=True)
        return []

def start_trade_stream():
    def run():
        subscribed = set()
        ws = None

        while True:
            try:
                symbols = load_symbols_from_db()
                new_symbols = [s for s in symbols if s not in subscribed]

                if new_symbols or ws is None:
                    if ws:
                        ws.close()
                        time.sleep(1)

                    streams = "/".join([f"{s}@trade" for s in symbols])
                    url = f"wss://stream.binance.com:9443/stream?streams={streams}"
                    print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ç–æ–∫—É: {url}", flush=True)

                    def on_message(wsapp, message):
                        try:
                            data = json.loads(message)
                            stream = data.get("stream", "")
                            if not stream.endswith("@trade"):
                                return
                            symbol = stream.replace("@trade", "").upper()
                            price = float(data["data"]["p"])
                            latest_price[symbol] = price
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", flush=True)

                    def on_error(wsapp, error):
                        print(f"WebSocket error: {error}", flush=True)

                    def on_close(wsapp, close_status_code, close_msg):
                        print("üîå WebSocket –∑–∞–∫—Ä—ã—Ç, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", flush=True)

                    def on_open(wsapp):
                        print("üü¢ WebSocket –æ—Ç–∫—Ä—ã—Ç", flush=True)

                    ws = websocket.WebSocketApp(url, on_message=on_message,
                                                on_error=on_error, on_close=on_close, on_open=on_open)

                    threading.Thread(target=ws.run_forever, daemon=True).start()
                    subscribed = set(symbols)

                time.sleep(30)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ trade-–ø–æ—Ç–æ–∫–µ: {e}", flush=True)
                time.sleep(10)

    threading.Thread(target=run, daemon=True).start()
# === –†–∞—Å—á—ë—Ç –∫–∞–Ω–∞–ª–∞ –ø–æ –ª–æ–≥–∏–∫–µ TV (49 —Å–≤–µ—á–µ–π + latest_price) ===
def calculate_channel(symbol, latest_price, conn=None):
    try:
        import numpy as np
        import math
        import psycopg2

        if conn is None:
            conn = psycopg2.connect(
                dbname=PG_NAME,
                user=PG_USER,
                password=PG_PASSWORD,
                host=PG_HOST,
                port=PG_PORT
            )
        cur = conn.cursor()
        cur.execute("""
            SELECT timestamp, close
            FROM candles_5m
            WHERE symbol = %s
            ORDER BY timestamp DESC
            LIMIT 49
        """, (symbol,))
        rows = cur.fetchall()

        if not rows or len(rows) < 49:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ {symbol}", flush=True)
            return None

        rows.reverse()
        closes = [row[1] for row in rows]
        closes.append(latest_price)

        X = np.arange(len(closes))
        Y = np.array(closes)

        avgX = np.mean(X)
        avgY = np.mean(Y)
        covXY = np.mean((X - avgX) * (Y - avgY))
        varX = np.mean((X - avgX) ** 2)
        slope = covXY / varX
        intercept = avgY - slope * avgX

        expected = slope * X + intercept
        stdDev = np.std(Y - expected)
        width = 2 * stdDev
        mid = expected[-1]

        width_percent = (width / mid) * 100 if mid != 0 else 0

        return {
            "slope": slope,
            "width_percent": width_percent,
            "mid": mid,
            "stdDev": stdDev,
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ calculate_channel: {e}", flush=True)
        return None
# === –ü–æ–ª—É—á–µ–Ω–∏–µ ATR –ø–æ —Ç–∏–∫–µ—Ä—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã candles_5m ===
def get_atr(symbol, period=14):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT timestamp, open, high, low, close
            FROM candles_5m
            WHERE symbol = %s
            ORDER BY timestamp DESC
            LIMIT %s
        """, (symbol, period + 1))
        rows = cur.fetchall()
        conn.close()

        if len(rows) < period + 1:
            msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ ATR({period}) –ø–æ {symbol}"
            print(msg, flush=True)
            entrylog.append(msg)
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        rows = list(reversed(rows))

        trs = []
        for i in range(1, len(rows)):
            _, _, high, low, close = rows[i]
            _, prev_open, _, _, prev_close = rows[i - 1]

            tr = max(
                high - low,
                abs(high - prev_close),
                abs(low - prev_close)
            )
            trs.append(tr)

        atr = sum(trs) / period
        msg = f"‚úÖ ATR({period}) –ø–æ {symbol}: {atr:.6f}"
        print(msg, flush=True)
        entrylog.append(msg)
        return atr

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ get_atr: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return None
# === –†–∞—Å—á—ë—Ç SL –∏ TP —É—Ä–æ–≤–Ω–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===
def calculate_sl_tp(entry_price, atr, direction="long"):
    """
    –†–∞—Å—á—ë—Ç SL –∏ 6 TP —É—Ä–æ–≤–Ω–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π channel_vilarso
    :param entry_price: —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
    :param atr: –∑–Ω–∞—á–µ–Ω–∏–µ ATR –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞
    :param direction: "long" –∏–ª–∏ "short"
    :return: (stop_loss_price, take_profits: list)
    """
    take_profits = []

    if direction == "long":
        stop_loss_price = entry_price - 1.5 * atr
        entrylog.append(f"‚úÖ SL: {stop_loss_price:.5f}")

        take_profits.append({"tp_percent": 50, "tp_price": entry_price + 2.0 * atr, "new_sl": entry_price})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price + 2.2 * atr, "new_sl": entry_price + 1.0 * atr})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price + 2.4 * atr, "new_sl": entry_price + 1.2 * atr})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price + 2.6 * atr, "new_sl": entry_price + 1.4 * atr})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price + 2.8 * atr, "new_sl": entry_price + 1.6 * atr})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price + 3.0 * atr, "new_sl": entry_price + 1.8 * atr})
    else:  # short
        stop_loss_price = entry_price + 1.5 * atr
        entrylog.append(f"‚úÖ SL: {stop_loss_price:.5f}")

        take_profits.append({"tp_percent": 50, "tp_price": entry_price - 2.0 * atr, "new_sl": entry_price})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price - 2.2 * atr, "new_sl": entry_price - 1.0 * atr})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price - 2.4 * atr, "new_sl": entry_price - 1.2 * atr})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price - 2.6 * atr, "new_sl": entry_price - 1.4 * atr})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price - 2.8 * atr, "new_sl": entry_price - 1.6 * atr})
        take_profits.append({"tp_percent": 10, "tp_price": entry_price - 3.0 * atr, "new_sl": entry_price - 1.8 * atr})

    # –õ–æ–≥–∏—Ä—É–µ–º TP —É—Ä–æ–≤–Ω–∏
    for i, tp in enumerate(take_profits, start=1):
        entrylog.append(f"‚úÖ TP{i}: {tp['tp_price']:.5f} ({tp['tp_percent']}%), SL ‚Üí {tp['new_sl']:.5f}")

    return stop_loss_price, take_profits
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ —Ç–∏–∫–µ—Ä—É ===
def check_open_trade_exists(symbol):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT 1
            FROM trades
            WHERE symbol = %s AND status = 'open'
            LIMIT 1
        """, (symbol,))
        exists = cur.fetchone()
        conn.close()

        if exists:
            msg = f"‚õî –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ {symbol}"
        else:
            msg = f"‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ –ø–æ {symbol}"

        print(msg, flush=True)
        entrylog.append(msg)
        return bool(exists)
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_open_trade_exists: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return True
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª –ª–∏ —Å–∏–≥–Ω–∞–ª BUYZONE/SELLZONE —Ä–∞–Ω–µ–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–≤–µ—á–∏ ===
def check_control_signal(symbol, control, start, end, action_time):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT timestamp FROM signals
            WHERE symbol = %s AND type = 'control' AND action = %s
              AND timestamp >= %s AND timestamp < %s
              AND timestamp < %s
            ORDER BY timestamp DESC
            LIMIT 1
        """, (symbol, control, start, end, action_time))
        row = cur.fetchone()
        conn.close()

        if row:
            msg = f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª {control} –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {start}‚Äì{end}, –¥–æ {action_time}"
            print(msg, flush=True)
            entrylog.append(msg)
            return True
        else:
            msg = f"‚ùå –°–∏–≥–Ω–∞–ª {control} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {start}‚Äì{end} –¥–æ {action_time}"
            print(msg, flush=True)
            entrylog.append(msg)
            return False
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_control_signal: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É ===
def check_trade_permission(symbol):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT tradepermission
            FROM symbols
            WHERE name = %s
        """, (symbol,))
        row = cur.fetchone()
        conn.close()

        if not row:
            msg = f"‚ùå –¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ symbols"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        if row[0] != 'enabled':
            msg = f"‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É {symbol} –∑–∞–ø—Ä–µ—â–µ–Ω–∞ (tradepermission = '{row[0]}')"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        msg = f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É {symbol} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
        print(msg, flush=True)
        entrylog.append(msg)
        return True

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_trade_permission: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ===
def check_strategy_permission(strategy_name):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT tradepermission
            FROM strategy
            WHERE name = %s
        """, (strategy_name,))
        row = cur.fetchone()
        conn.close()

        if not row:
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ strategy"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        if row[0] != 'enabled':
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' –æ—Ç–∫–ª—é—á–µ–Ω–∞ (tradepermission = '{row[0]}')"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        msg = f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
        print(msg, flush=True)
        entrylog.append(msg)
        return True

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_strategy_permission: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç maxtradevolume –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
def check_volume_limit(strategy_name):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã strategy
        cur.execute("""
            SELECT maxtradevolume
            FROM strategy
            WHERE name = %s
        """, (strategy_name,))
        row = cur.fetchone()

        if not row:
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ strategy"
            print(msg, flush=True)
            entrylog.append(msg)
            conn.close()
            return False

        max_volume = row[0]

        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        cur.execute("""
            SELECT COALESCE(SUM(size), 0)
            FROM trades
            WHERE strategy = %s AND status = 'open'
        """, (strategy_name,))
        current_volume = cur.fetchone()[0]
        conn.close()

        if current_volume < max_volume:
            msg = f"‚úÖ –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º {current_volume} –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {max_volume}"
            print(msg, flush=True)
            entrylog.append(msg)
            return True
        else:
            msg = f"‚ùå –õ–∏–º–∏—Ç maxtradevolume –ø—Ä–µ–≤—ã—à–µ–Ω: {current_volume} –∏–∑ {max_volume}"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_volume_limit: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ ===
def get_channel_direction(symbol):
    try:
        # –ë–µ—Ä—ë–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT close
            FROM candles_5m
            WHERE symbol = %s
            ORDER BY timestamp DESC
            LIMIT 1
        """, (symbol,))
        row = cur.fetchone()
        conn.close()

        if not row:
            msg = f"‚ùå –ù–µ—Ç —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {symbol}"
            print(msg, flush=True)
            entrylog.append(msg)
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        latest_price = row[0]
        result = calculate_channel(symbol, latest_price)

        if not result:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        slope = result["slope"]

        if slope > 0.01:
            direction = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π ‚ÜóÔ∏è"
        elif slope < -0.01:
            direction = "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π ‚ÜòÔ∏è"
        else:
            direction = "—Ñ–ª–µ—Ç ‚û°Ô∏è"

        msg = f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è {symbol}: {direction} (–Ω–∞–∫–ª–æ–Ω = {slope:.4f})"
        print(msg, flush=True)
        entrylog.append(msg)
        return direction

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ get_channel_direction: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ ‚â• 3 √ó ATR –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞ ===
def check_channel_width_vs_atr(symbol):
    try:
        atr = get_atr(symbol)
        if atr is None:
            return False

        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT close
            FROM candles_5m
            WHERE symbol = %s
            ORDER BY timestamp DESC
            LIMIT 1
        """, (symbol,))
        row = cur.fetchone()
        conn.close()

        if not row:
            msg = f"‚ùå –ù–µ—Ç —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {symbol}"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        latest_price = row[0]
        result = calculate_channel(symbol, latest_price)

        if not result:
            return False

        width_percent = result["width_percent"]
        slope = result["slope"]
        mid = result["mid"]
        atr_percent = (atr / mid) * 100 if mid else 0
        threshold = 3 * atr_percent

        if width_percent >= threshold:
            msg = f"‚úÖ –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ {width_percent:.2f}% ‚â• 3√óATR ({threshold:.2f}%)"
            result_ok = True
        else:
            msg = f"‚ùå –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ {width_percent:.2f}% < 3√óATR ({threshold:.2f}%)"
            result_ok = False

        print(msg, flush=True)
        entrylog.append(msg)
        return result_ok

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_channel_width_vs_atr: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SL/TP –≤ trades_sltp ===
def execute_trade(symbol, action, strategy):
    try:
        entry_price = latest_price.get(symbol)
        if entry_price is None:
            msg = f"‚ùå –ù–µ—Ç online-—Ü–µ–Ω—ã –¥–ª—è {symbol} –≤ latest_price"
            print(msg, flush=True)
            entrylog.append(msg)
            return

        atr = get_atr(symbol)
        if atr is None:
            return

        direction = "long" if action == "BUYORDER" else "short"

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()

        cur.execute("""
            SELECT size, leverage
            FROM strategy
            WHERE name = %s
        """, (strategy,))
        strat = cur.fetchone()
        if not strat:
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            print(msg, flush=True)
            entrylog.append(msg)
            conn.close()
            return

        size, leverage = strat

        # –†–∞—Å—á—ë—Ç SL –∏ TP
        sl_price, tp_list = calculate_sl_tp(entry_price, atr, direction)

        # –í—Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∫–∏
        cur.execute("""
            INSERT INTO trades (symbol, side, entry_time, entry_price, size, leverage, strategy, status, entrylog)
            VALUES (%s, %s, now(), %s, %s, %s, %s, 'open', %s)
            RETURNING id
        """, (
            symbol,
            direction,
            entry_price,
            size,
            leverage,
            strategy,
            "\n".join(entrylog)
        ))
        trade_id = cur.fetchone()[0]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SL
        cur.execute("""
            INSERT INTO trades_sltp (trade_id, type, step, target_price, exit_percent, new_stop_loss)
            VALUES (%s, 'sl', 0, %s, 100, NULL)
        """, (trade_id, sl_price))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º TP —É—Ä–æ–≤–Ω–∏
        for i, tp in enumerate(tp_list, start=1):
            cur.execute("""
                INSERT INTO trades_sltp (trade_id, type, step, target_price, exit_percent, new_stop_loss)
                VALUES (%s, 'tp', %s, %s, %s, %s)
            """, (
                trade_id,
                i,
                tp["tp_price"],
                tp["tp_percent"],
                tp["new_sl"]
            ))

        conn.commit()
        conn.close()

        entrylog.append(f"‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Ü–µ–Ω–µ {entry_price:.5f}, trade_id={trade_id}")
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol} (trade_id={trade_id})", flush=True)

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ execute_trade: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ ===
def run_executor():
    print("üöÄ Trade Executor –∑–∞–ø—É—â–µ–Ω", flush=True)
    while True:
        try:
            conn = psycopg2.connect(
                dbname=PG_NAME,
                user=PG_USER,
                password=PG_PASSWORD,
                host=PG_HOST,
                port=PG_PORT
            )
            cur = conn.cursor()

            cur.execute("""
                SELECT timestamp, symbol, action
                FROM signals
                WHERE type = 'action'
                  AND processed = false
                  AND timestamp >= now() - interval '1 minute'
                ORDER BY timestamp DESC
            """)
            signals = cur.fetchall()

            for ts, symbol, action in signals:
                print(f"[{ts}] üõ∞Ô∏è {action} {symbol}", flush=True)
                run_channel_vilarso(symbol, action, ts)

                cur.execute("""
                    UPDATE signals
                    SET processed = true
                    WHERE symbol = %s AND action = %s AND timestamp = %s
                """, (symbol, action, ts))

            conn.commit()
            conn.close()

            if not signals:
                print("‚è± –ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (type='action')", flush=True)

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ trade_executor:", e, flush=True)

        time.sleep(10)

if __name__ == "__main__":
    start_trade_stream()
    run_executor()
