# === trade_executor.py ===
# –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

import time
import psycopg2
import os
from datetime import datetime, timedelta

PG_HOST = os.environ.get("PG_HOST")
PG_PORT = os.environ.get("PG_PORT", 5432)
PG_NAME = os.environ.get("PG_NAME")
PG_USER = os.environ.get("PG_USER")
PG_PASSWORD = os.environ.get("PG_PASSWORD")

# === –°–¢–†–ê–¢–ï–ì–ò–Ø: channel_vilarso ===
def run_channel_vilarso(symbol, action, signal_time):
    print(f"üß† –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso –¥–ª—è {symbol} @ {signal_time}", flush=True)
    global entrylog
    entrylog = []

    if check_open_trade_exists(symbol):
        return

    interval_start = signal_time.replace(minute=(signal_time.minute // 5) * 5, second=0, microsecond=0)
    interval_end = interval_start + timedelta(minutes=5)

    required_control = "BUYZONE" if action.startswith("BUY") else "SELLZONE"
    if not check_control_signal(symbol, required_control, interval_start, interval_end, signal_time):
        return

    if not check_trade_permission(symbol):
        return

    if not check_strategy_permission("channel_vilarso"):
        return

    if not check_volume_limit("channel_vilarso"):
        return

    direction = get_channel_direction(symbol)
    if not check_direction_allowed(direction, action):
        return

    if not check_channel_width_vs_atr(symbol):
        return

    execute_trade(symbol, action, "channel_vilarso")
    print(f"‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol}", flush=True)
# === –†–∞—Å—á—ë—Ç –∫–∞–Ω–∞–ª–∞ –ø–æ –ª–æ–≥–∏–∫–µ TV (49 —Å–≤–µ—á–µ–π + latest_price) ===
def calculate_channel(symbol, latest_price, conn=None):
    try:
        import numpy as np
        import math
        import psycopg2

        if conn is None:
            conn = psycopg2.connect(
                dbname=PG_NAME,
                user=PG_USER,
                password=PG_PASSWORD,
                host=PG_HOST,
                port=PG_PORT
            )
        cur = conn.cursor()
        cur.execute("""
            SELECT timestamp, close
            FROM candles_5m
            WHERE symbol = %s
            ORDER BY timestamp DESC
            LIMIT 49
        """, (symbol,))
        rows = cur.fetchall()

        if not rows or len(rows) < 49:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ {symbol}", flush=True)
            return None

        rows.reverse()
        closes = [row[1] for row in rows]
        closes.append(latest_price)

        X = np.arange(len(closes))
        Y = np.array(closes)

        avgX = np.mean(X)
        avgY = np.mean(Y)
        covXY = np.mean((X - avgX) * (Y - avgY))
        varX = np.mean((X - avgX) ** 2)
        slope = covXY / varX
        intercept = avgY - slope * avgX

        expected = slope * X + intercept
        stdDev = np.std(Y - expected)
        width = 2 * stdDev
        mid = expected[-1]

        width_percent = (width / mid) * 100 if mid != 0 else 0

        return {
            "slope": slope,
            "width_percent": width_percent,
            "mid": mid,
            "stdDev": stdDev,
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ calculate_channel: {e}", flush=True)
        return None
# === –ü–æ–ª—É—á–µ–Ω–∏–µ ATR –ø–æ —Ç–∏–∫–µ—Ä—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã candles_5m ===
def get_atr(symbol, period=14):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT timestamp, open, high, low, close
            FROM candles_5m
            WHERE symbol = %s
            ORDER BY timestamp DESC
            LIMIT %s
        """, (symbol, period + 1))
        rows = cur.fetchall()
        conn.close()

        if len(rows) < period + 1:
            msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ ATR({period}) –ø–æ {symbol}"
            print(msg, flush=True)
            entrylog.append(msg)
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        rows = list(reversed(rows))

        trs = []
        for i in range(1, len(rows)):
            _, _, high, low, close = rows[i]
            _, prev_open, _, _, prev_close = rows[i - 1]

            tr = max(
                high - low,
                abs(high - prev_close),
                abs(low - prev_close)
            )
            trs.append(tr)

        atr = sum(trs) / period
        msg = f"‚úÖ ATR({period}) –ø–æ {symbol}: {atr:.6f}"
        print(msg, flush=True)
        entrylog.append(msg)
        return atr

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ get_atr: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return None

# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ —Ç–∏–∫–µ—Ä—É ===
def check_open_trade_exists(symbol):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT 1
            FROM trades
            WHERE symbol = %s AND status = 'open'
            LIMIT 1
        """, (symbol,))
        exists = cur.fetchone()
        conn.close()

        if exists:
            msg = f"‚õî –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ {symbol}"
        else:
            msg = f"‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ –ø–æ {symbol}"

        print(msg, flush=True)
        entrylog.append(msg)
        return bool(exists)
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_open_trade_exists: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return True
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª –ª–∏ —Å–∏–≥–Ω–∞–ª BUYZONE/SELLZONE —Ä–∞–Ω–µ–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–≤–µ—á–∏ ===
def check_control_signal(symbol, control, start, end, action_time):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT timestamp FROM signals
            WHERE symbol = %s AND type = 'control' AND action = %s
              AND timestamp >= %s AND timestamp < %s
              AND timestamp < %s
            ORDER BY timestamp DESC
            LIMIT 1
        """, (symbol, control, start, end, action_time))
        row = cur.fetchone()
        conn.close()

        if row:
            msg = f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª {control} –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {start}‚Äì{end}, –¥–æ {action_time}"
            print(msg, flush=True)
            entrylog.append(msg)
            return True
        else:
            msg = f"‚ùå –°–∏–≥–Ω–∞–ª {control} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {start}‚Äì{end} –¥–æ {action_time}"
            print(msg, flush=True)
            entrylog.append(msg)
            return False
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_control_signal: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É ===
def check_trade_permission(symbol):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT tradepermission
            FROM symbols
            WHERE name = %s
        """, (symbol,))
        row = cur.fetchone()
        conn.close()

        if not row:
            msg = f"‚ùå –¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ symbols"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        if row[0] != 'enabled':
            msg = f"‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É {symbol} –∑–∞–ø—Ä–µ—â–µ–Ω–∞ (tradepermission = '{row[0]}')"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        msg = f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É {symbol} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
        print(msg, flush=True)
        entrylog.append(msg)
        return True

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_trade_permission: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ===
def check_strategy_permission(strategy_name):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT tradepermission
            FROM strategy
            WHERE name = %s
        """, (strategy_name,))
        row = cur.fetchone()
        conn.close()

        if not row:
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ strategy"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        if row[0] != 'enabled':
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' –æ—Ç–∫–ª—é—á–µ–Ω–∞ (tradepermission = '{row[0]}')"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        msg = f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
        print(msg, flush=True)
        entrylog.append(msg)
        return True

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_strategy_permission: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç maxtradevolume –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
def check_volume_limit(strategy_name):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã strategy
        cur.execute("""
            SELECT maxtradevolume
            FROM strategy
            WHERE name = %s
        """, (strategy_name,))
        row = cur.fetchone()

        if not row:
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ strategy"
            print(msg, flush=True)
            entrylog.append(msg)
            conn.close()
            return False

        max_volume = row[0]

        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        cur.execute("""
            SELECT COALESCE(SUM(size), 0)
            FROM trades
            WHERE strategy = %s AND status = 'open'
        """, (strategy_name,))
        current_volume = cur.fetchone()[0]
        conn.close()

        if current_volume < max_volume:
            msg = f"‚úÖ –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º {current_volume} –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {max_volume}"
            print(msg, flush=True)
            entrylog.append(msg)
            return True
        else:
            msg = f"‚ùå –õ–∏–º–∏—Ç maxtradevolume –ø—Ä–µ–≤—ã—à–µ–Ω: {current_volume} –∏–∑ {max_volume}"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_volume_limit: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ ===
def get_channel_direction(symbol):
    try:
        # –ë–µ—Ä—ë–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT close
            FROM candles_5m
            WHERE symbol = %s
            ORDER BY timestamp DESC
            LIMIT 1
        """, (symbol,))
        row = cur.fetchone()
        conn.close()

        if not row:
            msg = f"‚ùå –ù–µ—Ç —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {symbol}"
            print(msg, flush=True)
            entrylog.append(msg)
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        latest_price = row[0]
        result = calculate_channel(symbol, latest_price)

        if not result:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        slope = result["slope"]

        if slope > 0.01:
            direction = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π ‚ÜóÔ∏è"
        elif slope < -0.01:
            direction = "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π ‚ÜòÔ∏è"
        else:
            direction = "—Ñ–ª–µ—Ç ‚û°Ô∏è"

        msg = f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è {symbol}: {direction} (–Ω–∞–∫–ª–æ–Ω = {slope:.4f})"
        print(msg, flush=True)
        entrylog.append(msg)
        return direction

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ get_channel_direction: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ ‚â• 3 √ó ATR –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞ ===
def check_channel_width_vs_atr(symbol):
    try:
        atr = get_atr(symbol)
        if atr is None:
            return False

        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT close
            FROM candles_5m
            WHERE symbol = %s
            ORDER BY timestamp DESC
            LIMIT 1
        """, (symbol,))
        row = cur.fetchone()
        conn.close()

        if not row:
            msg = f"‚ùå –ù–µ—Ç —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {symbol}"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        latest_price = row[0]
        result = calculate_channel(symbol, latest_price)

        if not result:
            return False

        width_percent = result["width_percent"]
        slope = result["slope"]
        mid = result["mid"]
        atr_percent = (atr / mid) * 100 if mid else 0
        threshold = 3 * atr_percent

        if width_percent >= threshold:
            msg = f"‚úÖ –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ {width_percent:.2f}% ‚â• 3√óATR ({threshold:.2f}%)"
            result_ok = True
        else:
            msg = f"‚ùå –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ {width_percent:.2f}% < 3√óATR ({threshold:.2f}%)"
            result_ok = False

        print(msg, flush=True)
        entrylog.append(msg)
        return result_ok

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_channel_width_vs_atr: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ó–∞–≥–ª—É—à–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ===
def execute_trade(symbol, action, strategy): entrylog.append("‚úÖ trade executed")
# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ ===
def run_executor():
    print("üöÄ Trade Executor –∑–∞–ø—É—â–µ–Ω", flush=True)
    while True:
        try:
            conn = psycopg2.connect(
                dbname=PG_NAME,
                user=PG_USER,
                password=PG_PASSWORD,
                host=PG_HOST,
                port=PG_PORT
            )
            cur = conn.cursor()

            cur.execute("""
                SELECT timestamp, symbol, action
                FROM signals
                WHERE type = 'action'
                  AND processed = false
                  AND timestamp >= now() - interval '1 minute'
                ORDER BY timestamp DESC
            """)
            signals = cur.fetchall()

            for ts, symbol, action in signals:
                print(f"[{ts}] üõ∞Ô∏è {action} {symbol}", flush=True)
                run_channel_vilarso(symbol, action, ts)

                cur.execute("""
                    UPDATE signals
                    SET processed = true
                    WHERE symbol = %s AND action = %s AND timestamp = %s
                """, (symbol, action, ts))

            conn.commit()
            conn.close()

            if not signals:
                print("‚è± –ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (type='action')", flush=True)

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ trade_executor:", e, flush=True)

        time.sleep(10)

if __name__ == "__main__":
    run_executor()
