# === trade_executor.py ===
# –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

import time
import psycopg2
import os
from datetime import datetime, timedelta

PG_HOST = os.environ.get("PG_HOST")
PG_PORT = os.environ.get("PG_PORT", 5432)
PG_NAME = os.environ.get("PG_NAME")
PG_USER = os.environ.get("PG_USER")
PG_PASSWORD = os.environ.get("PG_PASSWORD")

# === –°–¢–†–ê–¢–ï–ì–ò–Ø: channel_vilarso –æ–±–Ω–æ–≤–ª–µ–Ω–∞—è  ===
def run_channel_vilarso(symbol, action, signal_time, strategy_id):
    print(f"üß† –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ channel_vilarso –¥–ª—è {symbol} @ {signal_time}", flush=True)
    global entrylog
    entrylog = []

    if check_open_trade_exists(symbol):
        return

    interval_start = signal_time.replace(minute=(signal_time.minute // 5) * 5, second=0, microsecond=0)
    interval_end = interval_start + timedelta(minutes=5)

    required_control = "BUYZONE" if action.startswith("BUY") else "SELLZONE"
    if not check_control_signal(symbol, required_control, interval_start, interval_end, signal_time):
        return

    if not check_trade_permission(symbol, strategy_id):
        return

    if not check_strategy_permission("channel_vilarso"):
        return

    if not check_volume_limit("channel_vilarso"):
        return

    direction = get_channel_direction(symbol)
    if not check_direction_allowed(direction, action):
        return

    if not check_channel_width_vs_atr(symbol):
        return

    execute_trade(symbol, action, "channel_vilarso")
    print(f"‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol}", flush=True)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ —Ç–∏–∫–µ—Ä—É ===
def check_open_trade_exists(symbol):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT 1
            FROM trades
            WHERE symbol = %s AND status = 'open'
            LIMIT 1
        """, (symbol,))
        exists = cur.fetchone()
        conn.close()

        if exists:
            msg = f"‚õî –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ {symbol}"
        else:
            msg = f"‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ –ø–æ {symbol}"

        print(msg, flush=True)
        entrylog.append(msg)
        return bool(exists)
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_open_trade_exists: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return True
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª –ª–∏ —Å–∏–≥–Ω–∞–ª BUYZONE/SELLZONE —Ä–∞–Ω–µ–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–≤–µ—á–∏ ===
def check_control_signal(symbol, control, start, end, action_time):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()
        cur.execute("""
            SELECT timestamp FROM signals
            WHERE symbol = %s AND type = 'control' AND action = %s
              AND timestamp >= %s AND timestamp < %s
              AND timestamp < %s
            ORDER BY timestamp DESC
            LIMIT 1
        """, (symbol, control, start, end, action_time))
        row = cur.fetchone()
        conn.close()

        if row:
            msg = f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª {control} –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {start}‚Äì{end}, –¥–æ {action_time}"
            print(msg, flush=True)
            entrylog.append(msg)
            return True
        else:
            msg = f"‚ùå –°–∏–≥–Ω–∞–ª {control} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {start}‚Äì{end} –¥–æ {action_time}"
            print(msg, flush=True)
            entrylog.append(msg)
            return False
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_control_signal: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
def check_trade_permission(symbol, strategy_id):
    try:
        conn = psycopg2.connect(
            dbname=PG_NAME,
            user=PG_USER,
            password=PG_PASSWORD,
            host=PG_HOST,
            port=PG_PORT
        )
        cur = conn.cursor()

        cur.execute("SELECT tradepermission FROM symbols WHERE name = %s", (symbol,))
        symbol_row = cur.fetchone()

        cur.execute("SELECT tradepermission FROM strategy WHERE id = %s", (strategy_id,))
        strategy_row = cur.fetchone()

        conn.close()

        if not symbol_row:
            msg = f"‚ùå –¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ symbols"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        if not strategy_row:
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ strategy"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        if symbol_row[0] != 'enabled':
            msg = f"‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É {symbol} –∑–∞–ø—Ä–µ—â–µ–Ω–∞"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        if strategy_row[0] != 'enabled':
            msg = f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞"
            print(msg, flush=True)
            entrylog.append(msg)
            return False

        msg = f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–∏–∫–µ—Ä—É {symbol} –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
        print(msg, flush=True)
        entrylog.append(msg)
        return True

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ check_trade_permission: {e}"
        print(msg, flush=True)
        entrylog.append(msg)
        return False
# === –ó–∞–≥–ª—É—à–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ===
def check_volume_limit(strategy): entrylog.append("‚úÖ volume check ok"); return True
def get_channel_direction(symbol): return "–≤–æ—Å—Ö–æ–¥—è—â–∏–π ‚ÜóÔ∏è"
def check_direction_allowed(direction, action): entrylog.append("‚úÖ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ"); return True
def check_channel_width_vs_atr(symbol): entrylog.append("‚úÖ —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ >= 3*ATR"); return True
def execute_trade(symbol, action, strategy): entrylog.append("‚úÖ trade executed")

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º ===
def run_executor():
    print("üöÄ Trade Executor –∑–∞–ø—É—â–µ–Ω", flush=True)
    while True:
        try:
            conn = psycopg2.connect(
                dbname=PG_NAME,
                user=PG_USER,
                password=PG_PASSWORD,
                host=PG_HOST,
                port=PG_PORT
            )
            cur = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            cur.execute("""
                SELECT id, timestamp, symbol, action, type
                FROM signals
                WHERE processed = false
                  AND timestamp >= now() - interval '1 minute'
                ORDER BY timestamp DESC
            """)
            signals = cur.fetchall()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            cur.execute("""
                SELECT id, name, uses_buyorder, uses_sellorder, uses_buyzone, uses_sellzone, uses_info
                FROM strategy
                WHERE tradepermission = 'enabled'
            """)
            strategies = cur.fetchall()

            for signal_id, ts, symbol, action, signal_type in signals:
                print(f"[{ts}] üõ∞Ô∏è {action} {symbol} ({signal_type})", flush=True)

                for strategy in strategies:
                    strategy_id, name, use_buy, use_sell, use_zone_buy, use_zone_sell, use_info = strategy

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã —Ç–∏–ø–∞ action
                    if signal_type != 'action':
                        continue

                    if action == 'BUYORDER' and use_buy:
                        run_channel_vilarso(symbol, action, ts, strategy_id)

                    elif action == 'SELLORDER' and use_sell:
                        run_channel_vilarso(symbol, action, ts, strategy_id)

                    elif action == 'BUYZONE' and use_zone_buy:
                        run_channel_vilarso(symbol, action, ts, strategy_id)

                    elif action == 'SELLZONE' and use_zone_sell:
                        run_channel_vilarso(symbol, action, ts, strategy_id)

                    elif action == 'INFO' and use_info:
                        run_channel_vilarso(symbol, action, ts, strategy_id)

                # –°–∏–≥–Ω–∞–ª –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ–¥–∏–Ω —Ä–∞–∑
                cur.execute("""
                    UPDATE signals
                    SET processed = true
                    WHERE id = %s
                """, (signal_id,))

            conn.commit()
            conn.close()

            if not signals:
                print("‚è± –ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", flush=True)

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ trade_executor:", e, flush=True)

        time.sleep(10)

if __name__ == "__main__":
    run_executor()
